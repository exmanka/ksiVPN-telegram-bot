from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.utils import markdown
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from src.keyboards import user_authorized_kb, user_unauthorized_kb
from src.database import postgesql_db
from src.services import gpt4free, localization as loc
from bot_init import bot


async def command_help(message: Message):
    """Send message with information about provided help."""
    await message.answer(markdown.hide_link('https://t.me/exmanka') + loc.other.msgs['help'], parse_mode='HTML')


async def show_project_info(message: Message):
    """Send message with information about project."""
    await bot.send_photo(message.from_user.id, loc.other.tfids['project_info'], loc.other.msgs['project_info'])


async def answer_unrecognized_messages(message: Message):
    """Answer unrecognized messages with template message or generated by gpt4free conscious message."""
    # if client is registered and client turns on ChatGPT mode for bot
    if await postgesql_db.is_user_registered(message.from_user.id) and await postgesql_db.get_chatgpt_mode_status(message.from_user.id):

        # is client's subscription is active
        if await postgesql_db.is_subscription_active(message.from_user.id):

            # use aiogram.utils.chat_action.ChatActionSender in aiogram 3
            await bot.send_chat_action(message.from_user.id, 'typing')
            await message.reply(await gpt4free.chatgpt_answer(message.text))

        else:
            await message.reply(loc.other.msgs['chatgpt_only_for_active_sub'])

    # if is not registered of client turns off ChatGPT mode for bot
    else:
        await message.reply(loc.other.msgs['unrecognized_message'], parse_mode='HTML')


async def command_start(message: Message, state: FSMContext = None):
    """Send message when user press /start."""
    await bot.send_photo(message.from_user.id, loc.other.tfids['hello_message'], loc.other.msgs['hello_message'])

    # if user isn't in db
    if not await postgesql_db.is_user_registered(message.from_user.id):
        await message.answer(loc.other.msgs['price_info'], reply_markup=user_unauthorized_kb.welcome)

    # if user is already in db
    else:
        if state:
            await state.finish()
        await message.answer(loc.other.msgs['already_registered'], reply_markup=user_authorized_kb.menu)


def register_handlers_other(dp: Dispatcher):
    dp.register_message_handler(command_help, commands=['help'])
    dp.register_message_handler(command_help, commands=['help'], state='*')
    dp.register_message_handler(command_help, Text(loc.other.btns['help'], ignore_case=True))
    dp.register_message_handler(command_help, Text(loc.other.btns['help'], ignore_case=True), state='*')
    dp.register_message_handler(show_project_info, Text(loc.other.btns['about_project'], ignore_case=True))
    dp.register_message_handler(show_project_info, Text(loc.other.btns['about_service'], ignore_case=True))
    dp.register_message_handler(command_start, commands=['start'], state='*')
    dp.register_message_handler(answer_unrecognized_messages)
    dp.register_message_handler(answer_unrecognized_messages, state="*")
